document.body.onload = function() {

	let start, previousTimestamp;

	function plot(x, y, color, pxArr) {
		var red = Math.round(((color & 0xe0) >> 5) / 8 * 255);
		var green = Math.round(((color & 0x1c) >> 2) / 8 * 255);
		var blue = Math.round((color & 0x03) / 4 * 255);
		pxArr[x][y] = [red, green, blue];
	}

	function gpu(ram, spram, pxArr) {
		for (var x = 0; x < 128; x++) {
			for (var y = 0; y < 128; y++) {
				var mode = ram[0x3ff0];
				var screenQ = 0;
				if (x < 64 && y < 64) {
					mode = (mode & 0xc0) >> 6;
				}
				else if (x >= 64 && y < 64) {
					mode = (mode & 0x30) >> 4;
					screenQ = 1;
				}
				else if (x < 64 && y >= 64) {
					mode = (mode & 0x0c) >> 2;
					screenQ = 2;
				}
				else {
					mode = mode & 0x03;
					screenQ = 3;
				}
				if (mode & 2 == 0) {
					var text = ram[0x4000 + (0x1000 * screenQ) + Math.floor(y / 8) * 8 + Math.floor(x / 8)];
					var textColor = ram[0x3ff2];
					var bgColor = ram[0x3ff1];
					var num = font[8 * text + (y % 8)];
					if (num & (128 >> (x % 8))) plot(x, y, textColor, pxArr);
					else plot(x, y, bgColor, pxArr);
				}
				else if (mode & 2 == 1) {
					var color = ram[0x4000 + (0x1000 * screenQ) + 64 * (y % 64) + (x % 64)];
					plot(x, y, color, pxArr);
				}
			}
		}
		for (var q = 0; q < 4; i++) {
			var mode = (ram[0x3ff0] >> (6 - 2 * q)) & 0x01;
			if (mode) {
				for (var i = 0; i < 256; i += 3) {
					var tile = spram[i];
					if (tile == 0xff) break;
					var spColor = ram[0x3ff3];
					var y = spram[i + 1] & 0x7f;
					var yinc = 1;
					if (spram[i + 1] & 0x80) {
						y += 8;
						yinc = -1;
					}
					var x = spram[i + 2] & 0x7f;
					var xinc = 1;
					if (spram[i + 2] & 0x80) {
						x += 8;
						xinc = -1;
					}
					for (var j = 0; j < 8; j++) {
						var num;
						if (ram[0x3ff4] & 0x80) num = font[8 * tile + y];
						else num = ram[2048 * (ram[0x3ff4] & 0x1f) + 8 * tile + y];
						for (var k = 0; k < 8; k++) {
							var realX = (x - j * xinc) + k;
							var realY = (y - j * yinc) + j;
							if (num & (128 >> x)) plot(realX, realY, spColor, pxArr);
							x += xinc;
						}
						y += yinc;
					}
				}
			}
		}
	}

	function refresh(ctx, pxArr) {
		var imgData = ctx.getImageData(0, 0, 512, 512);
		for (var i = 0; i < 128; i++) {
			for (var j = 0; j < 128; j++) {
				var color = pxArr[i][j];
				for (var k = 0; k < 4; k++) {
					for (var l = 0; l < 4; l++) {
						imgData.data[i * 4 + k][j * 4 + l] = color;
					}
				}
			}
		}
		ctx.putImageData(imgData, 0, 0);
	}

	function latchKeys(numKeys) {
		var k = 0;
		var arr = new Uint8Array(256);
		for (var i = 0; i < 256; i++) arr[i] = 0xff;
		for (var i = 0; i < 256; i++) {
			if (keys[i]) arr[k++] = i;
			if (k >= numKeys) break;
		}
		return arr;
	}

	function read(addr) {
		addr &= 0xffff;
		if (addr === 0x3fef) {
			var data = latched.shift();
			if (data === undefined) return 0;
			return data;
		}
		else if (addr === 0x3fea) {
			var data = ram[0x3fea];
			ram[0x3fea] = 0;
			return data;
		}
		else if (addr === 0x3fee) {
			try {
				return fileBin[diskFilePtr];
			}
			catch (e) {
				ram[0x3fea] = 3;
				return 0;
			}
		}
		else if (addr < 0x8000) return ram[addr];
		else return cart[addr - 0x8000];
	}

	function read16(addr) {
		return (read(addr) << 8) | read(addr + 1);
	}

	function write(addr, data) {
		addr &= 0xffff;
		data &= 0xff;
		if (addr === 0x3fef) latched = latchKeys(data);
		else if (addr === 0x3fea) {
			diskData[fileList[fileNo]] = fileBin;
			if (exportFilesToDisk(diskname, diskData)) ram[0x3fea] = 0;
			else ram[0x3fea] = 2;
		}
		else if (addr === 0x3feb) {
			try {
				fileNo = data;
				diskFilePtr = 0;
				fileBin = getFileBinary(diskData[fileList[fileNo]]);
				ram[0x3fea] = 0;
			} catch (e) {
				ram[0x3fea] = 1;
			}
		}
		else if (addr === 0x3fec) diskFilePtr = data;
		else if (addr === 0x3fed) diskFilePtr |= (data << 8);
		else if (addr === 0x3fee) fileBin[diskFilePtr] = data;
		else if (addr < 0x8000) ram[addr] = data;
		else cart[addr - 0x8000] = data;
	}

	const opTbl = [
		function(s) { //0x00 - RST
			s.reset = true;
			return 1;
		},
		function(s) { //0x01 - ORA B
			s.acc |= s.br;
			return 1;
		},
		function(s) { //0x02 - ORA C
			s.acc |= s.cr;
			return 1;
		},
		function(s) { //0x03 - ORA addr
			s.acc |= read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0x04 - ORA imm
			s.acc |= read(s.pc + 1);
			return 2;
		},
		function(s) { //0x05 - ORA addr, B
			s.acc |= read(read16(s.pc + 1) + s.br);
			return 3;
		},
		function(s) { //0x06 - ORA (addr, B)
			s.acc |= read(read16(read16(s.pc + 1) + s.br));
			return 3;
		},
		function(s) { //0x07 - ORA (addr), C
			s.acc |= read(read16(read16(s.pc + 1)) + s.cr);
			return 3;
		},
		function(s) { //0x08 - INT
			s.irq = true;
			return 1;
		},
		function(s) { //0x09 - XOR B
			s.acc ^= s.br;
			return 1;
		},
		function(s) { //0x0A - XOR C
			s.acc ^= s.cr;
			return 1;
		},
		function(s) { //0x0B - XOR addr
			s.acc ^= read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0x0C - XOR imm
			s.acc ^= read(s.pc + 1);
			return 2;
		},
		function(s) { //0x0D - XOR addr, B
			s.acc ^= read(read16(s.pc + 1) + s.br);
			return 3;
		},
		function(s) { //0x0E - XOR (addr, B)
			s.acc ^= read(read16(read16(s.pc + 1) + s.br));
			return 3;
		},
		function(s) { //0x0F - XOR (addr), C
			s.acc ^= read(read16(read16(s.pc + 1)) + s.cr);
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0x20 - CLC
			s.flags.carry = false;
			return 1;
		},
		function(s) { //0x21 - AND B
			s.acc &= s.br;
			return 1;
		},
		function(s) { //0x22 - AND C
			s.acc &= s.cr;
			return 1;
		},
		function(s) { //0x23 - AND addr
			s.acc &= read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0x24 - AND imm
			s.acc &= read(s.pc + 1);
			return 2;
		},
		function(s) { //0x25 - AND addr, B
			s.acc &= read(read16(s.pc + 1) + s.br);
			return 3;
		},
		function(s) { //0x26 - AND (addr, B)
			s.acc &= read(read16(read16(s.pc + 1) + s.br));
			return 3;
		},
		function(s) { //0x27 - AND (addr), C
			s.acc &= read(read16(read16(s.pc + 1)) + s.cr);
			return 3;
		},
		function(s) { //0x28 - SEC
			s.flags.carry = true;
			return 1;
		},
		function(s) { //0x29 - CMP B
			var r = s.acc - s.br;
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 1;
		},
		function(s) { //0x2A - CMP C
			var r = s.acc - s.cr;
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 1;
		},
		function(s) { //0x2B - CMP addr
			var r = s.acc - read(read16(s.pc + 1));
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 3;
		},
		function(s) { //0x2C - CMP imm
			var r = s.acc - read(s.pc + 1);
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 2;
		},
		function(s) { //0x2D - CMP addr, B
			var r = s.acc - read(read16(s.pc + 1) + s.br);
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 3;
		},
		function(s) { //0x2E - CMP (addr, B)
			var r = s.acc - read(read16(read16(s.pc + 1) + s.br));
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 3;
		},
		function(s) { //0x2F - CMP (addr), C
			var r = s.acc - read(read16(read16(s.pc + 1)) + s.cr);
			s.flags.negative = (r < 0);
			s.flags.zero = (r == 0);
			s.flags.carry = (r > 0);
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0x40 - CLV
			s.flags.overflow = false;
			return 1;
		},
		function(s) { //0x41 - ADA B
			s.acc += s.br;
			s.flags.overflow = s.acc > 0xff;
			return 1;
		},
		function(s) { //0x42 - ADA C
			s.acc += s.cr;
			s.flags.overflow = s.acc > 0xff;
			return 1;
		},
		function(s) { //0x43 - ADA addr
			s.acc += read(read16(s.pc + 1));
			s.flags.overflow = s.acc > 0xff;
			return 3;
		},
		function(s) { //0x44 - ADA imm
			s.acc += read(s.pc + 1);
			s.flags.overflow = s.acc > 0xff;
			return 2;
		},
		function(s) { //0x45 - ADA addr, B
			s.acc += read(read16(s.pc + 1) + s.br);
			s.flags.overflow = s.acc > 0xff;
			return 3;
		},
		function(s) { //0x46 - ADA (addr, B)
			s.acc += read(read16(read16(s.pc + 1) + s.br));
			s.flags.overflow = s.acc > 0xff;
			return 3;
		},
		function(s) { //0x47 - ADA (addr), C
			s.acc += read(read16(read16(s.pc + 1)) + s.cr);
			s.flags.overflow = s.acc > 0xff;
			return 3;
		},
		function(s) { //0x48 - SEV
			s.flags.overflow = true;
			return 1;
		},
		function(s) { //0x49 - SBA B
			s.acc -= s.br;
			s.flags.overflow = s.acc < 0;
			return 1;
		},
		function(s) { //0x4A - SBA C
			s.acc -= s.cr;
			s.flags.overflow = s.acc < 0;
			return 1;
		},
		function(s) { //0x4B - SBA addr
			s.acc -= read(read16(s.pc + 1));
			s.flags.overflow = s.acc < 0;
			return 3;
		},
		function(s) { //0x4C - SBA imm
			s.acc -= read(s.pc + 1);
			s.flags.overflow = s.acc < 0;
			return 2;
		},
		function(s) { //0x4D - SBA addr, B
			s.acc -= read(read16(s.pc + 1) + s.br);
			s.flags.overflow = s.acc < 0;
			return 3;
		},
		function(s) { //0x4E - SBA (addr, B)
			s.acc -= read(read16(read16(s.pc + 1) + s.br));
			s.flags.overflow = s.acc < 0;
			return 3;
		},
		function(s) { //0x4F - SBA (addr), C
			s.acc -= read(read16(read16(s.pc + 1)) + s.cr);
			s.flags.overflow = s.acc < 0;
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0x60 - CLI
			s.flags.interrupt = false;
			return 1;
		},
		function(s) { //0x61 - LDA B
			s.acc = s.br;
			return 1;
		},
		function(s) { //0x62 - LDA C
			s.acc = s.cr;
			return 1;
		},
		function(s) { //0x63 - LDA addr
			s.acc = read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0x64 - LDA imm
			s.acc = read(s.pc + 1);
			return 2;
		},
		function(s) { //0x65 - LDA addr, B
			s.acc = read(read16(s.pc + 1) + s.br);
			return 3;
		},
		function(s) { //0x66 - LDA (addr, B)
			s.acc = read(read16(read16(s.pc + 1) + s.br));
			return 3;
		},
		function(s) { //0x67 - LDA (addr), C
			s.acc = read(read16(read16(s.pc + 1)) + s.cr);
			return 3;
		},
		function(s) { //0x68 - SEI
			s.flags.interrupt = true;
			return 1;
		},
		function(s) { //0x69 - LDB
			s.br = s.acc;
			return 1;
		},
		function(s) { //0x6A - LDB C
			s.br = s.cr;
			return 1;
		},
		function(s) { //0x6B - LDB addr
			s.br = read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0x6C - LDB imm
			s.br = read(s.pc + 1);
			return 2;
		},
		function(s) { //0x6D - LDB addr, C
			s.br = read(read16(s.pc + 1) + s.br);
			return 3;
		},
		function(s) { //0x6E - LDB (addr, C)
			s.br = read(read16(read16(s.pc + 1) + s.cr));
			return 3;
		},
		function(s) { //0x6F - LDB (addr), C
			s.br = read(read16(read16(s.pc + 1)) + s.cr);
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0xA0 - JSR addr
			s.callstack.push(s.pc + 3);
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xA1 - LDC
			s.cr = s.acc;
			return 1;
		},
		function(s) { //0xA2 - LDC B
			s.cr = s.br;
			return 1;
		},
		function(s) { //0xA3 - LDC addr
			s.cr = read(read16(s.pc + 1));
			return 3;
		},
		function(s) { //0xA4 - LDC imm
			s.cr = read(s.pc + 1);
			return 2;
		},
		function(s) { //0xA5 - LDC addr, B
			s.cr = read(read16(s.pc + 1) + s.cr);
			return 3;
		},
		function(s) { //0xA6 - LDC (addr, B)
			s.cr = read(read16(read16(s.pc + 1) + s.br));
			return 3;
		},
		function(s) { //0xA7 - LDC (addr), B
			s.cr = read(read16(read16(s.pc + 1)) + s.br);
			return 3;
		},
		function(s) { //0xA8 - RTS
			s.pc = s.callstack.pop();
			return 0;
		},
		function(s) { //0xA9 - JCC addr
			if (s.flags.carry) return 3;
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xAA - JCS addr
			if (s.flags.carry) {
				s.pc = read16(s.pc + 1);
				return 0;
			}
			return 3;
		},
		function(s) { //0xAB - JVC addr
			if (s.flags.overflow) return 3;
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xAC - JVS addr
			if (s.flags.overflow) {
				s.pc = read16(s.pc + 1);
				return 0;
			}
			return 3;
		},
		function(s) { //0xAD - JZC addr
			if (s.flags.zero) return 3;
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xAE - JZS addr
			if (s.flags.zero) {
				s.pc = read16(s.pc + 1);
				return 0;
			}
			return 3;
		},
		function(s) { //0xAF - JMP addr
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0xC0 - JIC addr
			if (s.flags.interrupt) return 3;
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xC1 - JNC addr
			if (s.flags.negative) return 3;
			s.pc = read16(s.pc + 1);
			return 0;
		},
		function(s) { //0xC2 - JNS addr
			if (s.flags.negative) {
				s.pc = read16(s.pc + 1);
				return 0;
			}
			return 3;
		},
		function(s) { //0xC3 - SHL
			s.acc <<= 1;
			s.flags.carry = s.acc > 0xff;
		},
		function(s) { //0xC4 - SHL B
			s.br <<= 1;
			s.flags.carry = s.br > 0xff;
		},
		function(s) { //0xC5 - SHL C
			s.cr <<= 1;
			s.flags.carry = s.cr > 0xff;
		},
		function(s) { //0xC6 - ROL
			s.acc <<= 1;
			if (s.flags.carry) s.acc++;
			s.flags.carry = s.acc > 0xff;
		},
		function(s) { //0xC7 - ROL B
			s.br <<= 1;
			if (s.flags.carry) s.br++;
			s.flags.carry = s.br > 0xff;
		},
		function(s) { //0xC8 - NOP
			return 1;
		},
		function(s) { //0xC9 - SHR
			s.flags.carry = (s.acc & 1 == 1);
			s.acc >>= 1;
		},
		function(s) { //0xCA - SHR B
			s.flags.carry = (s.br & 1 == 1);
			s.br >>= 1;
		},
		function(s) { //0xCB - SHR C
			s.flags.carry = (s.br & 1 == 1);
			s.br >>= 1;
		},
		function(s) { //0xCC - ROR
			if (s.flags.carry) s.acc += 256;
			s.flags.carry = (s.acc & 1 == 1);
			s.acc >>= 1;
		},
		function(s) { //0xCD- ROR B
			if (s.flags.carry) s.br += 256;
			s.flags.carry = (s.br & 1 == 1);
			s.br >>= 1;
		},
		function(s) { //0xCE - ROL C
			s.cr <<= 1;
			if (s.flags.carry) s.cr++;
			s.flags.carry = s.cr > 0xff;
		},
		function(s) { //0xCF - ROR C
			if (s.flags.carry) s.cr += 256;
			s.flags.carry = (s.cr & 1 == 1);
			s.cr >>= 1;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0xE0 - NOP imm
			return 2;
		},
		function(s) { //0xE1 - INC
			s.acc++;
			return 1;
		},
		function(s) { //0xE2 - INC B
			s.br++;
			s.br &= 0xff;
			return 1;
		},
		function(s) { //0xE3 - INC C
			s.cr++;
			s.cr &= 0xff;
			return 1;
		},
		function(s) { //0xE4 - INC addr
			write(read16(s.pc + 1), (read(read16(s.pc + 1)) + 1) & 0xff);
			return 3;
		},
		function(s) { //0xE5 - INC addr, B
			write(read16(s.pc + 1) + s.br, (read(read16(s.pc + 1) + s.br) + 1) & 0xff);
			return 3;
		},
		function(s) { //0xE6 - INC (addr, B)
			write(read(read16(read16(s.pc + 1) + s.br)), (read(read(read16(read16(s.pc + 1) + s.br))) + 1) & 0xff);
			return 3;
		},
		function(s) { //0xE7 - INC (addr), C
			write(read(read16(read16(s.pc + 1)) + s.cr), (read(read(read16(read16(s.pc + 1)) + s.cr)) + 1) & 0xff);
			return 3;
		},
		function(s) { //0xE8 - NOP addr
			return 3;
		},
		function(s) { //0xE9 - DEC
			s.acc--;
			return 1;
		},
		function(s) { //0xEA - DEC B
			s.br--;
			if (s.br < 0) s.br += 256;
			s.br &= 0xff;
			return 1;
		},
		function(s) { //0xEB - DEC C
			s.cr--;
			if (s.cr < 0) s.cr += 256;
			s.cr &= 0xff;
			return 1;
		},
		function(s) { //0xEC - DEC addr
			write(read16(s.pc + 1), (read(read16(s.pc + 1)) + 255) & 0xff);
			return 3;
		},
		function(s) { //0xED - DEC addr, B
			write(read16(s.pc + 1) + s.br, (read(read16(s.pc + 1) + s.br) + 255) & 0xff);
			return 3;
		},
		function(s) { //0xEE - DEC (addr, B)
			write(read(read16(read16(s.pc + 1) + s.br)), (read(read(read16(read16(s.pc + 1) + s.br))) + 255) & 0xff);
			return 3;
		},
		function(s) { //0xEF - DEC (addr), C
			write(read(read16(read16(s.pc + 1)) + s.cr), (read(read(read16(read16(s.pc + 1)) + s.cr)) + 255) & 0xff);
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
		function(s) { //0xF2 - STA addr
			write(read16(s.pc + 1), s.acc);
			return 3;
		},
		function(s) { //0xF3 - STA addr, B
			write(read16(s.pc + 1) + s.br, s.acc);
			return 3;
		},
		function(s) { //0xF4 - STA (addr, B)
			write(read(read16(read16(s.pc + 1) + s.br)), s.acc);
			return 3;
		},
		function(s) { //0xF5 - STA (addr), C
			write(read(read16(read16(s.pc + 1)) + s.cr), s.acc);
			return 3;
		},
		function(s) { //0xF6 - STB addr
			write(read16(s.pc + 1), s.br);
			return 3;
		},
		function(s) { //0xF7 - STB addr, C
			write(read16(s.pc + 1) + s.cr, s.br);
			return 3;
		},
		function(s) { //0xF8 - STB (addr, C)
			write(read(read16(read16(s.pc + 1) + s.cr)), s.br);
			return 3;
		},
		function(s) { //0xF9 - STB (addr), C
			write(read(read16(read16(s.pc + 1)) + s.cr), s.br);
			return 3;
		},
		function(s) { //0xFA - STC addr
			write(read16(s.pc + 1), s.cr);
			return 3;
		},
		function(s) { //0xFB - STC addr, B
			write(read16(s.pc + 1) + s.br, s.cr);
			return 3;
		},
		function(s) { //0xFC - STC (addr, B)
			write(read(read16(read16(s.pc + 1) + s.br)), s.cr);
			return 3;
		},
		function(s) { //0xFD - STC (addr), B
			write(read(read16(read16(s.pc + 1)) + s.br), s.cr);
			return 3;
		},
		function(s) { return 1; },
		function(s) { return 1; },
	]

	function cpu(cpuState) {
		if (cpuState.reset) {
			cpuState.pc = read16(0x0ffc);
			cpuState.reset = false;
			return;
		}
		if (cpuState.irq && cpuState.flags.interrupt) {
			cpuState.pc = read16(0x0ffe);
			cpuState.irq = false;
			return;
		}
		var opcode = read(cpuState.pc);
		var skip = opTbl[opcode](cpuState);
		cpuState.pc += skip;
		cpuState.pc &= 0xffff;
		if (cpuState.acc < 0) {
			cpuState.flags.negative = true;
			cpuState.acc += 256;
		}
		cpuState.acc &= 0xff;
	}

	function apu(apuState) {
		if (read16(0x3ff6) >= 128) {
			apuState.square1.frequency.value = 2000000 / read16(0x3ff6);
			apuState.square1.start();
		}
		else apuState.square1.stop();
		if (read16(0x3ff8) >= 128) {
			apuState.square2.frequency.value = 2000000 / read16(0x3ff8);
			apuState.square2.start();
		}
		else apuState.square2.stop();
		apuState.squareVol.gain.value = (read(0x3ff5) + 1) / 256;

		if (read16(0x3ffa) >= 128) {
			apuState.tri1.frequency.value = 2000000 / read16(0x3ffa);
			apuState.tri1.start();
		}
		else apuState.tri1.stop();
		if (read16(0x3ffc) >= 128) {
			apuState.tri2.frequency.value = 2000000 / read16(0x3ffc);
			apuState.tri2.start();
		}
		else apuState.tri2.stop();
		apuState.triVol.gain.value = (read(0x3ffe) + 1) / 256;
		if (read(0x3fff) > 16) {
			apuState.noiseVol.gain.value = (read(0x3fff) + 1) / 256;
			apuState.noise.start();
		}
		else apuState.noise.stop();
	}

	function frame(timestamp) {
		if (!running) return;
		if (start === undefined) start = timestamp;
		if (previousTimestamp !== timestamp) {
			const elapsed = timestamp - previousTimestamp;
			if (elapsed > 0.02) {
				for (var i = 0; i < 1000; i++) {
					cpu(cpuState);
					if (audio) apu(apuState);
				}
				if (cpuState.flags.interrupt) gpu(ram, ram.slice(0x0200, 0x0300), pxArr);
				refresh(ctx, pxArr);
				previousTimestamp = timestamp;
			}
			window.requestAnimationFrame(frame);
		}
	}

	const font = new Uint8Array([
		0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0xC4, 0xAE,
		0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x4E, 0x4A, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4C, 0x4C, 0x54, 0x64, 0x64,
		0x38, 0x00, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x40, 0x38, 0x00, 0x78, 0x44,
		0x44, 0x78, 0x40, 0x40, 0x40, 0x00, 0x20, 0x10, 0x08, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x38, 0x44,
		0x40, 0x40, 0x40, 0x44, 0x38, 0x60, 0x08, 0x10, 0x7C, 0x40, 0x7C, 0x40,
		0x7C, 0x00, 0x08, 0x10, 0x00, 0x30, 0x38, 0x48, 0x34, 0x00, 0xEF, 0xBF,
		0xBD, 0x00, 0x22, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x22, 0x00, 0x18, 0x18,
		0x18, 0x1F, 0x1F, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28, 0xEF, 0xBF, 0xBD,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xEF, 0xBF, 0xBD, 0x62, 0x00, 0x00,
		0x7C, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x3E, 0x3E,
		0x00, 0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0x10,
		0x38, 0x38, 0x38, 0x10, 0x00, 0x10, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10,
		0x10, 0x7C, 0x00, 0x10, 0x28, 0x28, 0x44, 0x7C, 0x44, 0x44, 0x00, 0x38,
		0x44, 0x44, 0x44, 0x58, 0x4C, 0x34, 0x00, 0x00, 0x00, 0x30, 0x08, 0x38,
		0x48, 0x34, 0x00, 0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C, 0x04, 0x04, 0x00,
		0x28, 0x00, 0x44, 0x44, 0x44, 0x3C, 0x00, 0x00, 0x00, 0x6C, 0x12, 0x7C,
		0xEF, 0xBF, 0xBD, 0x6C, 0x00, 0x00, 0x08, 0x10, 0x00, 0x10, 0x10, 0x10,
		0x00, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD,
		0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x18, 0x18, 0x18, 0xEF, 0xBF, 0xBD, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x18,
		0x18, 0x18, 0x38, 0x44, 0x44, 0x58, 0x44, 0x78, 0x40, 0x00, 0x00, 0x10,
		0x10, 0x7C, 0x10, 0x7C, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x22, 0x3E, 0x00,
		0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0x28, 0x28,
		0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x04, 0x08, 0x30, 0x40,
		0x7C, 0x00, 0x78, 0x44, 0x44, 0x78, 0x44, 0x44, 0x78, 0x00, 0x78, 0x44,
		0x44, 0x78, 0x44, 0x44, 0x44, 0x00, 0x40, 0x40, 0x40, 0x78, 0x44, 0x44,
		0x78, 0x00, 0x00, 0x00, 0x5C, 0x60, 0x40, 0x40, 0x40, 0x00, 0x08, 0x10,
		0x38, 0x44, 0x78, 0x40, 0x38, 0x00, 0x1E, 0x28, 0x28, 0x4E, 0x78, 0x48,
		0x4E, 0x00, 0x04, 0x08, 0x00, 0x1C, 0x22, 0x22, 0x1C, 0x00, 0x55, 0xEF,
		0xBF, 0xBD, 0x55, 0xEF, 0xBF, 0xBD, 0x55, 0xEF, 0xBF, 0xBD, 0x55, 0xEF,
		0xBF, 0xBD, 0x00, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x18, 0x18, 0x18, 0x00,
		0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28, 0x7C, 0x44, 0x40, 0x40,
		0x40, 0x40, 0x40, 0x00, 0xEF, 0xBF, 0xBD, 0x18, 0x04, 0x18, 0xEF, 0xBF,
		0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x38, 0x48, 0xEF, 0xBF, 0xBD, 0x22,
		0x3E, 0x00, 0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00,
		0x28, 0x28, 0x7C, 0x28, 0x7C, 0x28, 0x28, 0x00, 0x38, 0x44, 0x04, 0x38,
		0x04, 0x44, 0x38, 0x00, 0x38, 0x44, 0x40, 0x40, 0x40, 0x44, 0x38, 0x00,
		0x38, 0x44, 0x40, 0x38, 0x04, 0x44, 0x38, 0x00, 0x00, 0x00, 0x38, 0x44,
		0x40, 0x44, 0x38, 0x00, 0x00, 0x00, 0x3C, 0x40, 0x38, 0x04, 0x78, 0x00,
		0x10, 0x28, 0x00, 0x30, 0x38, 0x48, 0x34, 0x00, 0x10, 0x28, 0x00, 0x38,
		0x44, 0x44, 0x38, 0x00, 0x08, 0x10, 0x00, 0x44, 0x44, 0x44, 0x3C, 0x00,
		0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F,
		0x1F, 0x18, 0x18, 0x18, 0x28, 0x28, 0x28, 0x3F, 0x3F, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x3E, 0x54, 0x14, 0x24, 0x00, 0x07, 0x18, 0x20, 0x18,
		0x07, 0x00, 0x3F, 0x00, 0xEF, 0xBF, 0xBD, 0x54, 0x00, 0x10, 0x38, 0x44,
		0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0x10, 0x3C, 0x50, 0x38, 0x14,
		0x78, 0x10, 0x00, 0x08, 0x18, 0x28, 0x48, 0x7C, 0x08, 0x08, 0x00, 0x78,
		0x44, 0x44, 0x44, 0x44, 0x44, 0x78, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x00, 0x04, 0x04, 0x04, 0x3C, 0x44, 0x44, 0x3C, 0x00, 0x00,
		0x00, 0x20, 0x7C, 0x20, 0x20, 0x1C, 0x00, 0x00, 0x28, 0x00, 0x30, 0x38,
		0x48, 0x34, 0x00, 0x00, 0x28, 0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x24,
		0x58, 0x00, 0x78, 0x44, 0x44, 0x44, 0x00, 0x18, 0x18, 0x18, 0xEF, 0xBF,
		0xBD, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x00,
		0x00, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x7C, 0x44, 0x20,
		0x10, 0x20, 0x44, 0x7C, 0x00, 0x00, 0x06, 0x09, 0x11, 0x12, 0x10, 0x10,
		0x10, 0x7C, 0xEF, 0xBF, 0xBD, 0x7C, 0x20, 0x00, 0xEF, 0xBF, 0xBD, 0x22,
		0x3E, 0x00, 0x42, 0xEF, 0xBF, 0xBD, 0x48, 0x10, 0x24, 0x4A, 0xEF, 0xBF,
		0xBD, 0x00, 0x7C, 0x40, 0x40, 0x78, 0x04, 0x44, 0x38, 0x00, 0x7C, 0x40,
		0x40, 0x7C, 0x40, 0x40, 0x7C, 0x00, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
		0x38, 0x00, 0x00, 0x00, 0x38, 0x44, 0x78, 0x40, 0x38, 0x00, 0x00, 0x00,
		0x00, 0x44, 0x44, 0x44, 0x3C, 0x00, 0x20, 0x10, 0x00, 0x30, 0x38, 0x48,
		0x34, 0x00, 0x20, 0x10, 0x00, 0x38, 0x44, 0x44, 0x38, 0x00, 0x24, 0x58,
		0x00, 0x44, 0x64, 0x54, 0x4C, 0x00, 0x18, 0x18, 0xEF, 0xBF, 0xBD, 0x18,
		0xEF, 0xBF, 0xBD, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xEF, 0xBF, 0xBD,
		0x18, 0x18, 0x18, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x00,
		0x00, 0x00, 0x3E, 0x44, 0x44, 0x38, 0x00, 0x10, 0x10, 0x10, 0x50, 0xEF,
		0xBF, 0xBD, 0x40, 0x00, 0x1C, 0x22, 0x22, 0x22, 0x7C, 0xEF, 0xBF, 0xBD,
		0x00, 0x10, 0x38, 0x7C, 0x54, 0x44, 0x44, 0x7C, 0x00, 0x30, 0x48, 0x48,
		0x30, 0x4A, 0x44, 0x3A, 0x00, 0x38, 0x44, 0x40, 0x78, 0x44, 0x44, 0x38,
		0x00, 0x7C, 0x40, 0x40, 0x7C, 0x40, 0x40, 0x40, 0x00, 0x44, 0x44, 0x44,
		0x44, 0x28, 0x28, 0x10, 0x00, 0x38, 0x44, 0x40, 0x78, 0x40, 0x40, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x28, 0x10, 0x00, 0x10, 0x28, 0x10,
		0x30, 0x38, 0x48, 0x34, 0x00, 0x10, 0x28, 0x00, 0x44, 0x44, 0x44, 0x3C,
		0x00, 0x70, 0x38, 0x48, 0x38, 0x00, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28,
		0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18,
		0x18, 0x18, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x28, 0x28, 0x28, 0x00, 0x00,
		0x00, 0x44, 0x44, 0x44, 0x7A, 0x00, 0x40, 0x00, 0x10, 0x00, 0x7C, 0x00,
		0x10, 0x00, 0x10, 0x38, 0x44, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x30, 0x00,
		0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0x10, 0x10,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x44, 0x08, 0x10, 0x10, 0x10,
		0x10, 0x00, 0x38, 0x44, 0x40, 0x5C, 0x44, 0x44, 0x38, 0x00, 0x44, 0x44,
		0x44, 0x44, 0x54, 0x6C, 0x44, 0x00, 0x00, 0x00, 0x3C, 0x44, 0x44, 0x3C,
		0x04, 0x38, 0x00, 0x00, 0x00, 0x54, 0x54, 0x54, 0x3C, 0x00, 0x00, 0x00,
		0x38, 0x44, 0x40, 0x44, 0x38, 0x60, 0x20, 0x10, 0x00, 0x44, 0x44, 0x44,
		0x3C, 0x00, 0x10, 0x28, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x2F, 0x2F,
		0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28,
		0x00, 0x00, 0x00, 0x38, 0x50, 0x10, 0x08, 0x00, 0x00, 0x32, 0x4C, 0x00,
		0x32, 0x4C, 0x00, 0x00, 0x00, 0x10, 0x20, 0x7C, 0x20, 0x10, 0x00, 0x00,
		0x28, 0x28, 0x10, 0x38, 0x6C, 0xEF, 0xBF, 0xBD, 0x44, 0x00, 0x08, 0x10,
		0x20, 0x20, 0x20, 0x10, 0x08, 0x00, 0x38, 0x44, 0x44, 0x38, 0x44, 0x44,
		0x38, 0x00, 0x44, 0x44, 0x44, 0x7C, 0x44, 0x44, 0x44, 0x00, 0x44, 0x44,
		0x28, 0x10, 0x28, 0x44, 0x44, 0x00, 0x40, 0x40, 0x40, 0x78, 0x44, 0x44,
		0x44, 0x00, 0x00, 0x00, 0x00, 0x44, 0x28, 0x10, 0x6C, 0x00, 0x10, 0x28,
		0x38, 0x44, 0x78, 0x40, 0x38, 0x00, 0x00, 0x28, 0x00, 0x44, 0x44, 0x3C,
		0x04, 0x78, 0x00, 0x10, 0x00, 0x10, 0x30, 0x40, 0x44, 0x38, 0x00, 0x00,
		0xEF, 0xBF, 0xBD, 0x18, 0xEF, 0xBF, 0xBD, 0x18, 0x18, 0x18, 0x28, 0x28,
		0x2F, 0x20, 0x3F, 0x00, 0x00, 0x00, 0x18, 0x18, 0xEF, 0xBF, 0xBD, 0x18,
		0xEF, 0xBF, 0xBD, 0x18, 0x18, 0x18, 0x10, 0x7C, 0xEF, 0xBF, 0xBD, 0x7C,
		0x10, 0x00, 0x30, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
		0x14, 0xEF, 0xBF, 0xBD, 0x14, 0x24, 0x00, 0x00, 0x00, 0x10, 0x08, 0x3C,
		0x48, 0x50, 0x00, 0x00, 0x20, 0x10, 0x08, 0x08, 0x08, 0x10, 0x20, 0x00,
		0x38, 0x44, 0x44, 0x3C, 0x04, 0x44, 0x38, 0x00, 0x7C, 0x10, 0x10, 0x10,
		0x10, 0x10, 0x7C, 0x00, 0x44, 0x44, 0x44, 0x28, 0x10, 0x10, 0x10, 0x00,
		0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x44,
		0x44, 0x3C, 0x04, 0x78, 0x00, 0x28, 0x38, 0x44, 0x78, 0x40, 0x38, 0x00,
		0x28, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00, 0x7C,
		0x40, 0x00, 0x00, 0x00, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x08, 0xEF, 0xBF,
		0xBD, 0x28, 0x28, 0x28, 0x00, 0x00, 0x3F, 0x20, 0x2F, 0x28, 0x28, 0x28,
		0x18, 0x18, 0x18, 0xEF, 0xBF, 0xBD, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44,
		0x7C, 0x44, 0x44, 0x38, 0x00, 0x10, 0x38, 0x44, 0xEF, 0xBF, 0xBD, 0x7C,
		0x28, 0x10, 0x00, 0x00, 0x10, 0x10, 0x54, 0x38, 0x10, 0x00, 0x00, 0x00,
		0x10, 0x20, 0x78, 0x24, 0x14, 0x00, 0x00, 0x00, 0x10, 0x54, 0x38, 0x54,
		0x10, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00, 0x7C,
		0x08, 0x08, 0x08, 0x08, 0x48, 0x30, 0x00, 0x7C, 0x44, 0x08, 0x10, 0x20,
		0x44, 0x7C, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x10, 0x50, 0x20, 0x00,
		0x00, 0x7C, 0x04, 0x38, 0x40, 0x7C, 0x00, 0x20, 0x10, 0x38, 0x44, 0x78,
		0x40, 0x38, 0x00, 0x28, 0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00,
		0x00, 0x00, 0x7C, 0x04, 0x00, 0x00, 0x00, 0x28, 0x28, 0x28, 0x28, 0x28,
		0x28, 0x28, 0x28, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x18, 0x18, 0x18, 0x38,
		0x44, 0x44, 0x44, 0x28, 0xEF, 0xBF, 0xBD, 0x00, 0x10, 0x38, 0x44, 0xEF,
		0xBF, 0xBD, 0x7C, 0x28, 0x10, 0x00, 0x10, 0x10, 0x54, 0x38, 0x10, 0x7C,
		0x00, 0x00, 0xEF, 0xBF, 0xBD, 0xC8, 0xA4, 0x14, 0x44, 0x38, 0x00, 0x00,
		0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30,
		0x00, 0x10, 0x10, 0x20, 0x44, 0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00,
		0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00, 0x40, 0x40, 0x48, 0x50,
		0x60, 0x50, 0x48, 0x00, 0x18, 0x20, 0x20, 0x40, 0x20, 0x20, 0x18, 0x00,
		0x00, 0x00, 0x28, 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x10, 0x3C, 0x50,
		0x50, 0x3C, 0x10, 0x00, 0x41, 0x42, 0x44, 0x0E, 0x11, 0x22, 0x47, 0x00,
		0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x08, 0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28,
		0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x28, 0x28, 0x28,
		0xEF, 0xBF, 0xBD, 0x18, 0x20, 0x10, 0x38, 0x44, 0x44, 0x38, 0x00, 0x07,
		0x04, 0x04, 0x48, 0xEF, 0xBF, 0xBD, 0x28, 0x10, 0x00, 0xEF, 0xBF, 0xBD,
		0x00, 0xEF, 0xBF, 0xBD, 0xC6, 0x88, 0x04, 0x02, 0x0C, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x20, 0x20, 0x40, 0x0C, 0x30, 0x40, 0xEF, 0xBF, 0xBD,
		0x40, 0x30, 0x0C, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7C, 0x00,
		0xEF, 0xBF, 0xBD, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x10, 0x10,
		0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10,
		0x10, 0x00, 0x00, 0x10, 0x28, 0x00, 0x10, 0x10, 0x10, 0x00, 0x18, 0x24,
		0x20, 0x3C, 0x20, 0x38, 0x64, 0x00, 0x41, 0x42, 0x44, 0x08, 0x15, 0x27,
		0x41, 0x00, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x08, 0xEF, 0xBF, 0xBD, 0x00,
		0x00, 0x00, 0x28, 0x28, 0x2F, 0x20, 0x2F, 0x28, 0x28, 0x28, 0x00, 0x00,
		0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x00, 0x36, 0x49, 0x49, 0x36, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x00, 0x04, 0x24, 0x44,
		0xEF, 0xBF, 0xBD, 0x40, 0x20, 0x00, 0x00, 0x60, 0xEF, 0xBF, 0xBD, 0x48,
		0x04, 0x02, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x7C, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x44, 0x6C, 0x54, 0x44,
		0x44, 0x44, 0x44, 0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00,
		0x00, 0x00, 0x00, 0x78, 0x54, 0x54, 0x54, 0x00, 0x30, 0x08, 0x08, 0x04,
		0x08, 0x08, 0x30, 0x00, 0x00, 0x20, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00,
		0x44, 0x44, 0x28, 0x7C, 0x10, 0x7C, 0x10, 0x00, 0x00, 0x10, 0x00, 0x10,
		0x38, 0x38, 0x38, 0x10, 0x28, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x00, 0x00,
		0x00, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x00,
		0x00, 0xEF, 0xBF, 0xBD, 0x10, 0x38, 0x54, 0x54, 0x54, 0x38, 0x10, 0x00,
		0x18, 0x24, 0x08, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0x38,
		0x38, 0x38, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0xC6, 0xA8, 0x04, 0x02, 0x0C,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0xEF, 0xBF, 0xBD,
		0x30, 0x08, 0x04, 0x08, 0x30, 0xEF, 0xBF, 0xBD, 0x00, 0x44, 0x64, 0x64,
		0x54, 0x4C, 0x4C, 0x44, 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x70, 0x48, 0x48, 0x48, 0x00, 0x00, 0x32, 0x4C,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x38, 0x44, 0x7C, 0x44,
		0x00, 0x7C, 0x2A, 0x2A, 0x7C, 0x28, 0x28, 0x28, 0x00, 0x00, 0x12, 0x24,
		0x48, 0x24, 0x12, 0x00, 0x00, 0x18, 0x18, 0xEF, 0xBF, 0xBD, 0x18, 0xEF,
		0xBF, 0xBD, 0x00, 0x00, 0x00, 0x28, 0x28, 0xEF, 0xBF, 0xBD, 0x00, 0xEF,
		0xBF, 0xBD, 0x28, 0x28, 0x28, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0x0F, 0x00, 0x00, 0x30, 0x48, 0x20, 0x48, 0x30, 0x00, 0x0F, 0x0F, 0x0F,
		0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x7C, 0x38, 0x10,
		0x00, 0xEF, 0xBF, 0xBD, 0x48, 0x04, 0x02, 0x0C, 0x00, 0x02, 0x04, 0x08,
		0x10, 0x20, 0x40, 0xEF, 0xBF, 0xBD, 0x00, 0x38, 0x44, 0x04, 0x18, 0x10,
		0x00, 0x10, 0x00, 0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x38, 0x44,
		0x44, 0x38, 0x00, 0x00, 0x3E, 0x42, 0xEF, 0xBF, 0xBD, 0x42, 0x3E, 0x00,
		0x00, 0x10, 0x28, 0x10, 0x38, 0x44, 0x7C, 0x44, 0x00, 0x04, 0x0A, 0x08,
		0x3C, 0x10, 0x10, 0x50, 0x20, 0x00, 0x48, 0x24, 0x12, 0x24, 0x48, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xEF, 0xBF, 0xBD, 0x18, 0x18, 0x18, 0x18, 0x18,
		0xEF, 0xBF, 0xBD, 0x00, 0xEF, 0xBF, 0xBD, 0x00, 0x00, 0x00, 0xEF, 0xBF,
		0xBD, 0x00, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0xEF, 0xBF, 0xBD, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	]);

	let ctx = document.getElementById("quac").getContext("2d", {
		alpha: false
	});
	let cpuState = {
		reset: true,
		irq: false,
		pc: 0x0000,
		acc: 0x00,
		br: 0x00,
		cr: 0x00,
		flags: {
			zero: false,
			overflow: false,
			carry: false,
			interrupt: false,
			negative: false
		},
		callstack: []
	};

	async function createNoiseNode(actx) {
		if (actx.audioWorklet) {
			await actx.audioWorklet.addModule("js/newaudio.js");
			return new AudioWorkletNode(actx, "white-noise-generator");
		}
		else {
			var n = h.createScriptProcessor(2048, 1, 1);
			n.onaudioprocess = function(e) {
				var output = e.outputBuffer.getChannelData(0);
				for (var i = 0; i < 2048; i++) {
					output[i] = Math.random() * 2 - 1;
				}
			}
			return n;
		}
	}

	let running = true;
	let audio = false;

	let Ac = window.AudioContext || window.webkitAudioContext;
	if (Ac !== undefined) {
		audio = true;
		var h = new Ac();
		let apuState = {
			actx: h,
			square1: new OscillatorNode(h, { type: "square" }),
			square2: new OscillatorNode(h, { type: "square" }),
			squareVol: new GainNode(h),
			tri1: new OscillatorNode(h, { type: "triangle" }),
			tri2: new OscillatorNode(h, { type: "triangle" }),
			triVol: new GainNode(h),
			noiseVol: new GainNode(h)
		};
		apuState.squareVol.gain.value = 0;
		apuState.triVol.gain.value = 0;
		apuState.noiseVol.gain.value = 0;

		apuState.squareVol.connect(apuState.actx.destination);
		apuState.triVol.connect(apuState.actx.destination);

		createNoiseNode(h).then(function(node) {
			apuState.noise = node;
			apuState.noiseVol.connect(apuState.actx.destination);
			apuState.noise.connect(apuState.noiseVol);
		});

		apuState.square1.connect(apuState.squareVol);
		apuState.square2.connect(apuState.squareVol);

		apuState.tri1.connect(apuState.triVol);
		apuState.tri2.connect(apuState.triVol);

		document.getElementById("quac").addEventListener("click", function() {
			running = !running;
			if (running) apuState.actx.resume();
			else apuState.actx.suspend();
		});
	}

	let diskname = new Proxy(new URLSearchParams(window.location.search), {
		get: (searchParams, prop) => searchParams.get(prop)
	}).disk;

	let diskData;
	if (diskname) diskData = listFilesOnDisk(decodeURIComponent(diskname));
	else diskData = {};
	let fileList = Object.keys(diskData);
	let fileNo = null;
	let diskFilePtr = 0;
	let fileBin = new Uint8Array(65536);

	let ram = new Uint8Array(32768);
	let cart = new Uint8Array(32768);
	let pxArr = new Array(128);
	for (var i = 0; i < 128; i++) {
		pxArr[i] = new Array(128);
		for (var j = 0; j < 128; j++) {
			pxArr[i][j] = new Uint8Array(4);
		}
	}
	let keys = new Array(256);
	let latched = new Array(256);
	let ins = false;

	document.getElementById("quac").addEventListener("keydown", function(e) {
		if (!(e.ctrlKey && e.altKey)) {
			switch (e.key) {
				case "Esc":
				case "Escape":
					keys[0x1b] = true;
					break;
				case "Enter":
					keys[0x0d] = true;
					break;
				case "Tab":
					keys[0x09] = true;
					break;
				case "Spacebar":
					keys[0x20] = true;
					break;
				case "Down":
				case "ArrowDown":
					keys[0x12] = true;
					break;
				case "Up":
				case "ArrowUp":
					keys[0x11] = true;
					break;
				case "Left":
				case "ArrowLeft":
					keys[0x13] = true;
					break;
				case "Right":
				case "ArrowRight":
					keys[0x14] = true;
					break;
				case "Backspace":
				case "Del":
				case "Delete":
					if (ins) keys[0x0c] = true;
					else keys[0x7f] = true;
					break;
				case "Copy":
					keys[0x03] = true;
					break;
				case "Cut":
					keys[0x18] = true;
					break;
				case "Paste":
					keys[0x16] = true;
					break;
				case "Undo":
					keys[0x1a] = true;
					break;
				case "Redo":
					keys[0x19] = true;
					break;
				default:
					if (e.key.length == 1 && e.key.charCodeAt(0) < 0x7f) keys[e.key.charCodeAt(0)] = true;
					break;
			}
		}
		else if (e.ctrlKey && !(e.altKey)) {
			if (e.key.length == 1) {
				if (e.key.charCodeAt(0) > 0x60 && e.key.charCodeAt(0) < 0x7b) keys[e.key.charCodeAt(0) - 0x60] = true;
				else if (e.key == "@") keys[0x00] = true;
				else if (e.key.charCodeAt(0) > 0x5a && e.key.charCodeAt(0) < 0x60) keys[e.key.charCodeAt(0) - 0x40] = true;
			}
		}
		else if (!(e.ctrlKey)) {
			if (e.key.length == 1 && e.key.charCodeAt(0) < 0x7f) keys[e.key.charCodeAt(0) + 0x80] = true;
		}
		else {
			if (e.key.length == 1) {
				if (e.key.charCodeAt(0) > 0x60 && e.key.charCodeAt(0) < 0x7b) keys[e.key.charCodeAt(0) + 0x20] = true;
				else if (e.key == "@") keys[0x80] = true;
				else if (e.key.charCodeAt(0) > 0x5a && e.key.charCodeAt(0) < 0x60) keys[e.key.charCodeAt(0) + 0x40] = true;
			}
		}
	});
	document.getElementById("quac").addEventListener("keyup", function(e) {
		if (!(e.ctrlKey && e.altKey)) {
			switch (e.key) {
				case "Esc":
				case "Escape":
					keys[0x1b] = false;
					break;
				case "Enter":
					keys[0x0d] = false;
					break;
				case "Tab":
					keys[0x09] = false;
					break;
				case "Spacebar":
					keys[0x20] = false;
					break;
				case "Down":
				case "ArrowDown":
					keys[0x12] = false;
					break;
				case "Up":
				case "ArrowUp":
					keys[0x11] = false;
					break;
				case "Left":
				case "ArrowLeft":
					keys[0x13] = false;
					break;
				case "Right":
				case "ArrowRight":
					keys[0x14] = false;
					break;
				case "Backspace":
				case "Del":
				case "Delete":
					if (ins) keys[0x0c] = false;
					else keys[0x7f] = false;
					break;
				case "Copy":
					keys[0x03] = false;
					break;
				case "Cut":
					keys[0x18] = false;
					break;
				case "Paste":
					keys[0x16] = false;
					break;
				case "Undo":
					keys[0x1a] = false;
					break;
				case "Redo":
					keys[0x19] = false;
					break;
				default:
					if (e.key.length == 1 && e.key.charCodeAt(0) < 0x7f) keys[e.key.charCodeAt(0)] = false;
			}
		}
		else if (e.ctrlKey && !(e.altKey)) {
			if (e.key.length == 1) {
				if (e.key.charCodeAt(0) > 0x60 && e.key.charCodeAt(0) < 0x7b) keys[e.key.charCodeAt(0) - 0x60] = false;
				else if (e.key == "@") keys[0x00] = false;
				else if (e.key.charCodeAt(0) > 0x5a && e.key.charCodeAt(0) < 0x60) keys[e.key.charCodeAt(0) - 0x40] = false;
			}
		}
		else if (!(e.ctrlKey)) {
			switch (e.key) {
				case "Backspace":
				case "Del":
				case "Delete":
					ins = !ins;
					break;
				default:
					if (e.key.length == 1 && e.key.charCodeAt(0) < 0x7f) keys[e.key.charCodeAt(0) + 0x80] = false;
					break;
			}
		}
		else {
			if (e.key.length == 1) {
				if (e.key.charCodeAt(0) > 0x60 && e.key.charCodeAt(0) < 0x7b) keys[e.key.charCodeAt(0) + 0x20] = false;
				else if (e.key == "@") keys[0x80] = false;
				else if (e.key.charCodeAt(0) > 0x5a && e.key.charCodeAt(0) < 0x60) keys[e.key.charCodeAt(0) + 0x40] = false;
			}
		}
	});

	if (running) {
		window.requestAnimationFrame(frame);
	}
}